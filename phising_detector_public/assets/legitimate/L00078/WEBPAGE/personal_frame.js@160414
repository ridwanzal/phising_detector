(function($){
  /**
   * パーソナルフレームを管理するクラス
   * @param selector パーソナルフレームのルート要素のセレクタ
   * @constructor
   */
  var PersonalFrame = function (selector) {
    this._$personalFrame = $(selector);
    this._$title = this._$personalFrame.find('.personalTitleText');
    this._$closeButton = this._$personalFrame.find('.personalCloseButton');
    this._$descriptionLink = this._$personalFrame.find('.personalDescriptionText');

    this._apiBaseUrl = this._$personalFrame.data('api-base-url');
    this._currentLanguage = this._$personalFrame.data('current-language');
  };

  /**
   * データを取得してパーソナル枠を更新します
   */
  PersonalFrame.prototype.update = function () {
    // パーソナル枠用の要素がなければ何もしない
    if (!this._$personalFrame.length) {
      return;
    }

    var self = this;
    this._fetchData()
      // 通信成功時
      .done(function (response) {
        // パーソナル枠が１個以上なかったら非表示にして終了
        if (response.data.length < 1) {
          self.hide();
          return;
        }

        // DOMに取得したデータをセット
        self._setPersonalFrame(response.data[0]);

        self.show();
      })
      // 通信失敗時
      .fail(function (response) {
        self.hide();
      });
  };

  /**
   * パーソナル枠を表示します
   */
  PersonalFrame.prototype.show = function () {
    this._$personalFrame.show();
  }

  /**
   * パーソナル枠を非表示にします
   */
  PersonalFrame.prototype.hide = function () {
    this._$personalFrame.hide();
  }

  /**
   * 要素にパーソナル枠情報・イベントハンドラを設定します
   * @param data
   * @private
   */
  PersonalFrame.prototype._setPersonalFrame = function (data) {
    this._$title.html(data.title);
    this._$descriptionLink.html(data.text);
    this._$descriptionLink.attr('href', data.linkUrl);
    this._$descriptionLink.off('click.personalFrameDescriptionLink');
    this._$descriptionLink.on('click.personalFrameDescriptionLink', data, $.proxy(this._onDescriptionLinkClicked, this));
    this._$closeButton.off('click.personalFrameCloseButton');
    this._$closeButton.on('click.personalFrameCloseButton', data, $.proxy(this._onCloseButtonClicked, this));
  }

  /**
   * パーソナル枠の description がクリックされた時のイベントハンドラです
   * @param e
   * @private
   */
  PersonalFrame.prototype._onDescriptionLinkClicked = function (e) {
    e.preventDefault();
    var href = this._$descriptionLink.attr('href');
    this._notifyClick(e.data.id, 'clicked')
      .always(function () {
        location.href = href;
      });
  };

  /**
   * close ボタンがクリックされた時のイベントハンドラ
   * @param e
   * @private
   */
  PersonalFrame.prototype._onCloseButtonClicked = function (e) {
    e.preventDefault();
    this._notifyClick(e.data.id, 'closed');
    this.hide();
  };

  /**
   * パーソナル枠データ取得リクエストを投げます
   * @returns {jqXHR}
   * @private
   */
  PersonalFrame.prototype._fetchData = function () {
    var url = this._apiBaseUrl + 'v1/personal-frames.json';
    return this._ajax('GET', url);
  };

  /**
   * パーソナル枠がクリックされたのを通知するリクエストを投げます
   * @param id
   * @param action
   * @returns {jqXHR}
   * @private
   */
  PersonalFrame.prototype._notifyClick = function (id, action) {
    var url =  this._apiBaseUrl + 'v1/user/actions/personal-frames/' + id + '/' + action + '.json';
    return this._ajax('POST', url);
  };

  /**
   * jQuery.ajax で通信をします
   * @param type
   * @param url
   * @returns {jqXHR}
   * @private
   */
  PersonalFrame.prototype._ajax = function (type, url) {
    var self = this;
    return $.ajax({
      type: type,
      url: url,
      dataType: 'json',
      cache: false,
      xhrFields: {
        withCredentials: true
      },
      headers: {
        'X-Frontend-Id': 6,
        'X-Request-With': location.href,
        'Accept-Language': self._currentLanguage
      }
    });
  };

  $(function () {
    (new PersonalFrame('#_personalFrame')).update();
  });
})(jQuery);
